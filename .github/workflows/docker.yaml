name: Publish Docker

on:
  push:
    tags:
      - 'v*'
      - '*'
  workflow_dispatch: {}

jobs:
  # Check what files changed to decide which base images to build
  find-changes:
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.changes.outputs.core }}
      multi: ${{ steps.changes.outputs.multi }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Check file changes and container existence
        id: changes
        run: |
          IMAGE_NAME="ghcr.io/${{ github.repository }}"
          
          # Check if core container exists
          if docker manifest inspect ${IMAGE_NAME}-core:latest >/dev/null 2>&1; then
            echo "Core container exists, checking for changes..."
            CORE_EXISTS=true
          else
            echo "Core container missing, will build"
            CORE_EXISTS=false
          fi
          
          # Check if multi container exists  
          if docker manifest inspect ${IMAGE_NAME}-multi:latest >/dev/null 2>&1; then
            echo "Multi container exists, checking for changes..."
            MULTI_EXISTS=true
          else
            echo "Multi container missing, will build"
            MULTI_EXISTS=false
          fi
          
          # If containers don't exist, build them (fork scenario)
          if [[ "$CORE_EXISTS" == "false" ]]; then
            echo "core=true" >> $GITHUB_OUTPUT
          else
            # Container exists, check for file changes
            PREVIOUS_TAG=$(git tag --sort=-creatordate | head -2 | tail -1)
            if [[ -n "$PREVIOUS_TAG" ]] && git diff --name-only $PREVIOUS_TAG $GITHUB_REF_NAME | grep -q "Dockerfile.core"; then
              echo "core=true" >> $GITHUB_OUTPUT
            else
              echo "core=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          if [[ "$MULTI_EXISTS" == "false" ]]; then
            echo "multi=true" >> $GITHUB_OUTPUT
          else
            # Container exists, check for file changes
            PREVIOUS_TAG=$(git tag --sort=-creatordate | head -2 | tail -1)
            if [[ -n "$PREVIOUS_TAG" ]] && git diff --name-only $PREVIOUS_TAG $GITHUB_REF_NAME | grep -qE "(Dockerfile.multi|Dockerfile.core)"; then
              echo "multi=true" >> $GITHUB_OUTPUT
            else
              echo "multi=false" >> $GITHUB_OUTPUT
            fi
          fi
          
          echo "Core build: $(grep 'core=' $GITHUB_OUTPUT | cut -d= -f2)"
          echo "Multi build: $(grep 'multi=' $GITHUB_OUTPUT | cut -d= -f2)"



  # Build core base image only if relevant files changed
  build-core:
    needs: find-changes
    if: needs.find-changes.outputs.core == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push core image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.core
          push: true
          tags: ${{ env.IMAGE_NAME }}-core:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Build multi base image only if relevant files changed
  build-multi:
    needs: [find-changes, build-core]
    if: always() && (needs.find-changes.outputs.multi == 'true' || github.event_name == 'workflow_dispatch')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push multi image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.multi
          push: true
          tags: ${{ env.IMAGE_NAME }}-multi:latest
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Always build lite image (includes metabuild source changes)
  build-lite:
    needs: [build-core]
    if: always() && !failure()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,suffix=-lite
            type=raw,value=lite
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push lite image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.lite
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}-lite
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Always build full image (includes metabuild source changes)
  build-full:
    needs: [build-multi]
    if: always() && !failure()
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: ghcr.io/${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
      
      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push full image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.full
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ github.ref_name }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
